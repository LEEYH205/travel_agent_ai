version: '3.8'

services:
  # 백엔드 API 서비스
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend
    container_name: travel_agent_backend
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    env_file:
      - .env
    volumes:
      - ./cache:/app/cache
      - ./logs:/app/logs
    networks:
      - travel_agent_network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis

  # 프론트엔드 서비스 (Streamlit)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: travel_agent_frontend
    ports:
      - "8501:8501"
    environment:
      - ENVIRONMENT=production
      - BACKEND_URL=http://backend:8000
    env_file:
      - .env
    volumes:
      - ./travel_agent/frontend:/app/travel_agent/frontend
      - ./cache:/app/cache
    networks:
      - travel_agent_network
    restart: unless-stopped
    depends_on:
      - backend
    command: streamlit run travel_agent/frontend/app.py --server.port 8501 --server.address 0.0.0.0

  # Redis 캐시 서비스
  redis:
    image: redis:7-alpine
    container_name: travel_agent_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - travel_agent_network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx 리버스 프록시
  nginx:
    image: nginx:alpine
    container_name: travel_agent_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - travel_agent_network
    restart: unless-stopped
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: [ "CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # 모니터링 서비스 (Prometheus + Grafana)
  prometheus:
    image: prom/prometheus:latest
    container_name: travel_agent_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - travel_agent_network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: travel_agent_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - travel_agent_network
    restart: unless-stopped
    depends_on:
      - prometheus

  # 로그 수집 서비스
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: travel_agent_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - travel_agent_network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: travel_agent_kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - travel_agent_network
    restart: unless-stopped
    depends_on:
      - elasticsearch

  # 개발 환경 서비스
  dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: travel_agent_dev
    ports:
      - "8000:8000"
      - "8501:8501"
    environment:
      - ENVIRONMENT=development
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - BACKEND_URL=http://localhost:8000
    env_file:
      - .env
    volumes:
      - .:/app
      - ./cache:/app/cache
      - ./logs:/app/logs
    networks:
      - travel_agent_network
    restart: unless-stopped
    command: sh -c "uvicorn travel_agent.backend.main:app --host 0.0.0.0 --port 8000 --reload & streamlit run travel_agent/frontend/app.py --server.port 8501 --server.address 0.0.0.0"

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  travel_agent_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
